{"version":3,"sources":["utils.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["detectSums","array","result","len","length","sum","pa","pb","concat","Object","toConsumableArray","pA","pB","calculateResult","input","parsedInput","error","split","map","i","parseInt","trim","includes","NaN","e","message","samples","App","_useState","useState","_useState2","slicedToArray","sample","setSample","_useState3","_useState4","text","setText","_useState5","_useState6","setInput","_useState7","_useState8","setResult","_useState9","_useState10","setError","handleSampleButton","sampleId","sampleText","data","res","react_default","a","createElement","className","onClick","type","value","onChange","event","target","index","present","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.326bbb2c.chunk.js","sourcesContent":["export const detectSums = (array) => {\n  let result = [];\n  const len = array.length;\n  for (let sum = 0; sum < len; sum++) {\n    for (let pa = 0; pa < len; pa++) {\n      for (let pb = pa + 1; pb < len; pb++) {\n        if (array[pa] + array[pb] !== array[sum]) continue;\n        if (pa !== sum && pb !== sum) {\n          result = [ ...result, { pA: pa, pB: pb, sum: sum } ];\n        }\n      }\n    }\n  }\n  return result;\n};\n\nexport function calculateResult(input) {\n  let error = null;\n  let parsedInput;\n  try {\n    parsedInput = input.split(',').map(i => parseInt(i.trim(), 10));\n    if (parsedInput.includes(NaN) || parsedInput === []) error = 'Input is not an number array';\n  } catch (e) {\n    error = e.message;\n  }\n  return { input: parsedInput, error }\n}\n","\nconst simple0 = '1, 2, 3';\nconst simple1 = '1, 2, 4';\nconst simple2 = '1, 2, 3, 4';\n\nconst large1 = '1, 2, 1, 3';\nconst large2 = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10';\nconst large3 = '1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20';\n\nexport const samples = [ simple0, simple1, simple2, large1, large2, large3 ];\n","import React, { useState } from 'react';\nimport { calculateResult, detectSums } from './utils';\nimport { samples } from './constants';\nimport './App.css';\n\nconst App = () => {\n  const [sample, setSample] = useState(null);\n  const [text, setText] = useState('');\n  const [input, setInput] = useState([]);\n  const [result, setResult] = useState([]);\n  const [error, setError] = useState('');\n\n  const handleChange = (event) => {\n    setSample(null);\n    const { value } = event.target;\n    setText(value);\n    const data = calculateResult(value);\n    setInput(data.input);\n    setError(data.error);\n    setResult([]);\n  };\n\n  const onResult = () => {\n    if (!error) {\n      const res = detectSums(input);\n      setResult(res);\n    }\n  };\n\n  const handleSampleButton = (sampleId) => {\n    setSample(sampleId);\n    const sampleText = samples[sampleId];\n    setText(sampleText);\n    const data = calculateResult(sampleText);\n    setInput(data.input);\n    setError(data.error);\n    const res = detectSums(data.input);\n    setResult(res);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-form\">\n        <div className=\"complexity\">\n          <div className=\"complexity-item\">Time Complexity: O(n3)</div>\n          <div className=\"complexity-item\">Memory Complexity: 4n</div>\n        </div>\n        <div className=\"sample-list\">\n          <div className=\"sample-case\">\n            <div className=\"case-label\">Sample of Simple Cases </div>\n            <div className=\"sample-button-list\">\n              <div\n                className={`sample-button${sample === 0 ? ' active' : ''}`}\n                onClick={() => handleSampleButton(0)}\n              >\n                Case 1\n              </div>\n              <div\n                className={`sample-button${sample === 1 ? ' active' : ''}`}\n                onClick={() => handleSampleButton(1)}\n              >\n                Case 2\n              </div>\n              <div\n                className={`sample-button${sample === 2 ? ' active' : ''}`}\n                onClick={() => handleSampleButton(2)}\n              >\n                Case 3\n              </div>\n            </div>\n          </div>\n          <div className=\"sample-case\">\n            <div className=\"case-label\">Sample of Large Cases</div>\n            <div className=\"sample-button-list\">\n              <div\n                className={`sample-button${sample === 3 ? ' active' : ''}`}\n                onClick={() => handleSampleButton(3)}\n              >\n                Case 1\n              </div>\n              <div\n                className={`sample-button${sample === 4 ? ' active' : ''}`}\n                onClick={() => handleSampleButton(4)}\n              >\n                Case 2\n              </div>\n              <div\n                className={`sample-button${sample === 5 ? ' active' : ''}`}\n                onClick={() => handleSampleButton(5)}\n              >\n                Case 3\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"input-wrapper\">\n          <span className=\"input-label\">Input: </span>\n          <input className=\"input-pan\" type=\"text\" value={text} onChange={handleChange} />\n          <span className=\"input-rule\">Enter the Input Value!!! ( number array )</span>\n          { error &&\n          <div className=\"input-error\">\n            {error}\n          </div>\n          }\n        </div>\n\n        <div className=\"result-layer\">\n          <span onClick={onResult} className=\"result-button\">Result</span>\n          <span className=\"result-pair\">{result.length} PAIRS</span>\n          <div className=\"result-list\">\n            {result.map((res, index) => {\n              const present = `{ pA: ${res.pA}, pB: ${res.pB}, sum: ${res.sum} }`;\n              return <span className=\"result-item\" key={index}>{present}</span>\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}